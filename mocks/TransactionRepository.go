// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/dto"
	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/models"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Payment provides a mock function with given fields: trans, id
func (_m *TransactionRepository) Payment(trans *models.Transaction, id int) (*models.Transaction, error) {
	ret := _m.Called(trans, id)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(*models.Transaction, int) *models.Transaction); ok {
		r0 = rf(trans, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Transaction, int) error); ok {
		r1 = rf(trans, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCronJobs provides a mock function with given fields:
func (_m *TransactionRepository) RunCronJobs() {
	_m.Called()
}

// TopUpQr provides a mock function with given fields: trans, id
func (_m *TransactionRepository) TopUpQr(trans *dto.TopUpQr, id int) (*dto.TopUpQr, error) {
	ret := _m.Called(trans, id)

	var r0 *dto.TopUpQr
	if rf, ok := ret.Get(0).(func(*dto.TopUpQr, int) *dto.TopUpQr); ok {
		r0 = rf(trans, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopUpQr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TopUpQr, int) error); ok {
		r1 = rf(trans, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupDeposit provides a mock function with given fields: trans, id
func (_m *TransactionRepository) TopupDeposit(trans *dto.TopupDepositReq, id int) (*models.Deposit, error) {
	ret := _m.Called(trans, id)

	var r0 *models.Deposit
	if rf, ok := ret.Get(0).(func(*dto.TopupDepositReq, int) *models.Deposit); ok {
		r0 = rf(trans, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Deposit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TopupDepositReq, int) error); ok {
		r1 = rf(trans, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupSavings provides a mock function with given fields: trans, id
func (_m *TransactionRepository) TopupSavings(trans *models.Transaction, id int) (*models.Transaction, error, error) {
	ret := _m.Called(trans, id)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(*models.Transaction, int) *models.Transaction); ok {
		r0 = rf(trans, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Transaction, int) error); ok {
		r1 = rf(trans, id)
	} else {
		r1 = ret.Error(1)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.Transaction, int) error); ok {
		r2 = rf(trans, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateInterestAndTaxSavings provides a mock function with given fields:
func (_m *TransactionRepository) UpdateInterestAndTaxSavings() {
	_m.Called()
}

type mockConstructorTestingTNewTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepository(t mockConstructorTestingTNewTransactionRepository) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

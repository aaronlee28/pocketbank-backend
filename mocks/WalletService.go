// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/dto"
	mock "github.com/stretchr/testify/mock"

	repositories "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/repositories"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

// ChangeUserDetails provides a mock function with given fields: data, id
func (_m *WalletService) ChangeUserDetails(data *dto.ChangeUserDetailsReqRes, id int) (*dto.ChangeUserDetailsReqRes, error) {
	ret := _m.Called(data, id)

	var r0 *dto.ChangeUserDetailsReqRes
	if rf, ok := ret.Get(0).(func(*dto.ChangeUserDetailsReqRes, int) *dto.ChangeUserDetailsReqRes); ok {
		r0 = rf(data, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ChangeUserDetailsReqRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.ChangeUserDetailsReqRes, int) error); ok {
		r1 = rf(data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepositInfo provides a mock function with given fields: id
func (_m *WalletService) DepositInfo(id int) (*[]dto.DepositInfoRes, error) {
	ret := _m.Called(id)

	var r0 *[]dto.DepositInfoRes
	if rf, ok := ret.Get(0).(func(int) *[]dto.DepositInfoRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.DepositInfoRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoriteContact provides a mock function with given fields: param, favoriteid
func (_m *WalletService) FavoriteContact(param *dto.FavoriteContactReq, favoriteid int) (*dto.FavoriteContactRes, error) {
	ret := _m.Called(param, favoriteid)

	var r0 *dto.FavoriteContactRes
	if rf, ok := ret.Get(0).(func(*dto.FavoriteContactReq, int) *dto.FavoriteContactRes); ok {
		r0 = rf(param, favoriteid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.FavoriteContactRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.FavoriteContactReq, int) error); ok {
		r1 = rf(param, favoriteid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoriteContactList provides a mock function with given fields: id
func (_m *WalletService) FavoriteContactList(id int) (*[]dto.FavoriteContactRes, error) {
	ret := _m.Called(id)

	var r0 *[]dto.FavoriteContactRes
	if rf, ok := ret.Get(0).(func(int) *[]dto.FavoriteContactRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.FavoriteContactRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavingsInfo provides a mock function with given fields: id
func (_m *WalletService) SavingsInfo(id int) (*dto.SavingsRes, error) {
	ret := _m.Called(id)

	var r0 *dto.SavingsRes
	if rf, ok := ret.Get(0).(func(int) *dto.SavingsRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.SavingsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionHistory provides a mock function with given fields: q, id
func (_m *WalletService) TransactionHistory(q *repositories.Query, id int) (*[]dto.TransRes, error) {
	ret := _m.Called(q, id)

	var r0 *[]dto.TransRes
	if rf, ok := ret.Get(0).(func(*repositories.Query, int) *[]dto.TransRes); ok {
		r0 = rf(q, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.TransRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repositories.Query, int) error); ok {
		r1 = rf(q, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDetails provides a mock function with given fields: id
func (_m *WalletService) UserDetails(id int) (*dto.UserDetailsRes, error) {
	ret := _m.Called(id)

	var r0 *dto.UserDetailsRes
	if rf, ok := ret.Get(0).(func(int) *dto.UserDetailsRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserDetailsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletService(t mockConstructorTestingTNewWalletService) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/dto"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: data
func (_m *AuthService) ChangePassword(data *dto.ChangePReq) (*dto.ChangePRes, error) {
	ret := _m.Called(data)

	var r0 *dto.ChangePRes
	if rf, ok := ret.Get(0).(func(*dto.ChangePReq) *dto.ChangePRes); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ChangePRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.ChangePReq) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCode provides a mock function with given fields: email
func (_m *AuthService) GetCode(email *dto.CodeReq) (*dto.CodeRes, error) {
	ret := _m.Called(email)

	var r0 *dto.CodeRes
	if rf, ok := ret.Get(0).(func(*dto.CodeReq) *dto.CodeRes); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CodeRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CodeReq) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: req
func (_m *AuthService) Register(req *dto.RegReq) (*dto.RegRes, error) {
	ret := _m.Called(req)

	var r0 *dto.RegRes
	if rf, ok := ret.Get(0).(func(*dto.RegReq) *dto.RegRes); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RegRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RegReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: req
func (_m *AuthService) SignIn(req *dto.AuthReq) (*dto.TokenRes, error) {
	ret := _m.Called(req)

	var r0 *dto.TokenRes
	if rf, ok := ret.Get(0).(func(*dto.AuthReq) *dto.TokenRes); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.AuthReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t mockConstructorTestingTNewAuthService) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

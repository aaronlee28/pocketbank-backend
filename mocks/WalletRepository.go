// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/dto"
	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/models"

	repositories "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/repositories"
)

// WalletRepository is an autogenerated mock type for the WalletRepository type
type WalletRepository struct {
	mock.Mock
}

// ChangeUserDetails provides a mock function with given fields: data, id
func (_m *WalletRepository) ChangeUserDetails(data *dto.ChangeUserDetailsReqRes, id int) (*dto.ChangeUserDetailsReqRes, error) {
	ret := _m.Called(data, id)

	var r0 *dto.ChangeUserDetailsReqRes
	if rf, ok := ret.Get(0).(func(*dto.ChangeUserDetailsReqRes, int) *dto.ChangeUserDetailsReqRes); ok {
		r0 = rf(data, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ChangeUserDetailsReqRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.ChangeUserDetailsReqRes, int) error); ok {
		r1 = rf(data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepositInfo provides a mock function with given fields: id
func (_m *WalletRepository) DepositInfo(id int) (*[]models.Deposit, error) {
	ret := _m.Called(id)

	var r0 *[]models.Deposit
	if rf, ok := ret.Get(0).(func(int) *[]models.Deposit); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Deposit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoriteContact provides a mock function with given fields: favoriteid, selfid
func (_m *WalletRepository) FavoriteContact(favoriteid int, selfid int) (*models.Favoritecontact, error) {
	ret := _m.Called(favoriteid, selfid)

	var r0 *models.Favoritecontact
	if rf, ok := ret.Get(0).(func(int, int) *models.Favoritecontact); ok {
		r0 = rf(favoriteid, selfid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Favoritecontact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(favoriteid, selfid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FavoriteContactList provides a mock function with given fields: id
func (_m *WalletRepository) FavoriteContactList(id int) (*[]models.Favoritecontact, error) {
	ret := _m.Called(id)

	var r0 *[]models.Favoritecontact
	if rf, ok := ret.Get(0).(func(int) *[]models.Favoritecontact); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Favoritecontact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavingsInfo provides a mock function with given fields: id
func (_m *WalletRepository) SavingsInfo(id int) (*models.Savings, error) {
	ret := _m.Called(id)

	var r0 *models.Savings
	if rf, ok := ret.Get(0).(func(int) *models.Savings); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Savings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionHistory provides a mock function with given fields: q, id
func (_m *WalletRepository) TransactionHistory(q *repositories.Query, id int) (*[]models.Transaction, error) {
	ret := _m.Called(q, id)

	var r0 *[]models.Transaction
	if rf, ok := ret.Get(0).(func(*repositories.Query, int) *[]models.Transaction); ok {
		r0 = rf(q, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repositories.Query, int) error); ok {
		r1 = rf(q, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDetails provides a mock function with given fields: id
func (_m *WalletRepository) UserDetails(id int) (*dto.UserDetailsRes, error) {
	ret := _m.Called(id)

	var r0 *dto.UserDetailsRes
	if rf, ok := ret.Get(0).(func(int) *dto.UserDetailsRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserDetailsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletRepository creates a new instance of WalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletRepository(t mockConstructorTestingTNewWalletRepository) *WalletRepository {
	mock := &WalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

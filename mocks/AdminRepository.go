// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/dto"
	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/models"

	repositories "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/repositories"
)

// AdminRepository is an autogenerated mock type for the AdminRepository type
type AdminRepository struct {
	mock.Mock
}

// AdminUserDetails provides a mock function with given fields: id
func (_m *AdminRepository) AdminUserDetails(id int) (*dto.UserDetailsRes, error) {
	ret := _m.Called(id)

	var r0 *dto.UserDetailsRes
	if rf, ok := ret.Get(0).(func(int) *dto.UserDetailsRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserDetailsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUserReferralDetails provides a mock function with given fields: id
func (_m *AdminRepository) AdminUserReferralDetails(id int) (*[]models.Referral, error) {
	ret := _m.Called(id)

	var r0 *[]models.Referral
	if rf, ok := ret.Get(0).(func(int) *[]models.Referral); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Referral)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUserTransaction provides a mock function with given fields: q, id
func (_m *AdminRepository) AdminUserTransaction(q *repositories.Query, id int) (*[]models.Transaction, error) {
	ret := _m.Called(q, id)

	var r0 *[]models.Transaction
	if rf, ok := ret.Get(0).(func(*repositories.Query, int) *[]models.Transaction); ok {
		r0 = rf(q, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repositories.Query, int) error); ok {
		r1 = rf(q, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUsersList provides a mock function with given fields:
func (_m *AdminRepository) AdminUsersList() (*[]models.User, error) {
	ret := _m.Called()

	var r0 *[]models.User
	if rf, ok := ret.Get(0).(func() *[]models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeUserStatus provides a mock function with given fields: id
func (_m *AdminRepository) ChangeUserStatus(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePromotion provides a mock function with given fields: data
func (_m *AdminRepository) CreatePromotion(data *dto.PromotionReq) (*models.Promotion, error) {
	ret := _m.Called(data)

	var r0 *models.Promotion
	if rf, ok := ret.Get(0).(func(*dto.PromotionReq) *models.Promotion); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PromotionReq) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePromotion provides a mock function with given fields: id
func (_m *AdminRepository) DeletePromotion(id int) (*models.Promotion, error) {
	ret := _m.Called(id)

	var r0 *models.Promotion
	if rf, ok := ret.Get(0).(func(int) *models.Promotion); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EligibleMerchandiseList provides a mock function with given fields:
func (_m *AdminRepository) EligibleMerchandiseList() (*[]models.Merchandise, error) {
	ret := _m.Called()

	var r0 *[]models.Merchandise
	if rf, ok := ret.Get(0).(func() *[]models.Merchandise); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Merchandise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchStock provides a mock function with given fields:
func (_m *AdminRepository) GetMerchStock() (*[]models.Merchstock, error) {
	ret := _m.Called()

	var r0 *[]models.Merchstock
	if rf, ok := ret.Get(0).(func() *[]models.Merchstock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Merchstock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromotion provides a mock function with given fields:
func (_m *AdminRepository) GetPromotion() (*[]models.Promotion, error) {
	ret := _m.Called()

	var r0 *[]models.Promotion
	if rf, ok := ret.Get(0).(func() *[]models.Promotion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Merchandise provides a mock function with given fields: id
func (_m *AdminRepository) Merchandise(id int) (*models.Merchandise, error) {
	ret := _m.Called(id)

	var r0 *models.Merchandise
	if rf, ok := ret.Get(0).(func(int) *models.Merchandise); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Merchandise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MerchandiseStatus provides a mock function with given fields: data
func (_m *AdminRepository) MerchandiseStatus(data *dto.MerchandiseStatus) (error, error, int) {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.MerchandiseStatus) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.MerchandiseStatus) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(*dto.MerchandiseStatus) int); ok {
		r2 = rf(data)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// UpdateMerchStocks provides a mock function with given fields: data
func (_m *AdminRepository) UpdateMerchStocks(data *dto.UpdateMerchStocksReq) (*models.Merchstock, error) {
	ret := _m.Called(data)

	var r0 *models.Merchstock
	if rf, ok := ret.Get(0).(func(*dto.UpdateMerchStocksReq) *models.Merchstock); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Merchstock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UpdateMerchStocksReq) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromotion provides a mock function with given fields: id, data
func (_m *AdminRepository) UpdatePromotion(id int, data *dto.PatchPromotionReq) (*dto.PatchPromotionReq, error) {
	ret := _m.Called(id, data)

	var r0 *dto.PatchPromotionReq
	if rf, ok := ret.Get(0).(func(int, *dto.PatchPromotionReq) *dto.PatchPromotionReq); ok {
		r0 = rf(id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PatchPromotionReq)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *dto.PatchPromotionReq) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDepositInfo provides a mock function with given fields: id
func (_m *AdminRepository) UserDepositInfo(id int) (*[]models.Deposit, error) {
	ret := _m.Called(id)

	var r0 *[]models.Deposit
	if rf, ok := ret.Get(0).(func(int) *[]models.Deposit); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Deposit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRate provides a mock function with given fields: id, data
func (_m *AdminRepository) UserRate(id int, data *dto.ChangeInterestRateReq) error {
	ret := _m.Called(id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *dto.ChangeInterestRateReq) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersRate provides a mock function with given fields: data
func (_m *AdminRepository) UsersRate(data *dto.ChangeInterestRateReq) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.ChangeInterestRateReq) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdminRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminRepository creates a new instance of AdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminRepository(t mockConstructorTestingTNewAdminRepository) *AdminRepository {
	mock := &AdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

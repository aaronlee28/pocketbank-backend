// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/aaron-lee/final-project-backend/dto"
	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// Payment provides a mock function with given fields: req, id
func (_m *TransactionService) Payment(req *dto.PaymentReq, id int) (*dto.PaymentRes, error) {
	ret := _m.Called(req, id)

	var r0 *dto.PaymentRes
	if rf, ok := ret.Get(0).(func(*dto.PaymentReq, int) *dto.PaymentRes); ok {
		r0 = rf(req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PaymentRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PaymentReq, int) error); ok {
		r1 = rf(req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCronJobs provides a mock function with given fields:
func (_m *TransactionService) RunCronJobs() {
	_m.Called()
}

// TopUpQr provides a mock function with given fields: req, id
func (_m *TransactionService) TopUpQr(req *dto.TopUpQr, id int) (*dto.TopUpQr, error) {
	ret := _m.Called(req, id)

	var r0 *dto.TopUpQr
	if rf, ok := ret.Get(0).(func(*dto.TopUpQr, int) *dto.TopUpQr); ok {
		r0 = rf(req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopUpQr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TopUpQr, int) error); ok {
		r1 = rf(req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupDeposit provides a mock function with given fields: req, id
func (_m *TransactionService) TopupDeposit(req *dto.TopupDepositReq, id int) (*dto.DepositRes, error) {
	ret := _m.Called(req, id)

	var r0 *dto.DepositRes
	if rf, ok := ret.Get(0).(func(*dto.TopupDepositReq, int) *dto.DepositRes); ok {
		r0 = rf(req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.DepositRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TopupDepositReq, int) error); ok {
		r1 = rf(req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupSavings provides a mock function with given fields: req, id
func (_m *TransactionService) TopupSavings(req *dto.TopupSavingsReq, id int) (*dto.TopupSavingsRes, error) {
	ret := _m.Called(req, id)

	var r0 *dto.TopupSavingsRes
	if rf, ok := ret.Get(0).(func(*dto.TopupSavingsReq, int) *dto.TopupSavingsRes); ok {
		r0 = rf(req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopupSavingsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TopupSavingsReq, int) error); ok {
		r1 = rf(req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
